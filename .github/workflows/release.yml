name: 🚀 Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Release version (e.g., v1.0.0)"
        required: true
        type: string

jobs:
  create-release:
    name: 🏷️ Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: "18"
          cache: "pnpm"

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Build applications
        run: pnpm build

      - name: 🧪 Run tests
        run: pnpm test:all

      - name: 📊 Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          # Generate changelog
          if [ -n "$PREVIOUS_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD)
          else
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --max-count=20)
          fi

          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 🏷️ Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name || inputs.version }}
          release_name: Release ${{ github.ref_name || inputs.version }}
          body: |
            ## 🚀 Release ${{ github.ref_name || inputs.version }}

            ### 📋 Changes:
            ${{ steps.changelog.outputs.changelog }}

            ### 📦 Installation:
            ```bash
            # Clone the repository
            git clone https://github.com/${{ github.repository }}.git
            cd construction-excel-pro

            # Install dependencies
            pnpm install

            # Start development server
            pnpm dev
            ```

            ### 🐳 Docker:
            ```bash
            # Build and run with Docker
            docker-compose up -d
            ```

            ### 📚 Documentation:
            - [Installation Guide](https://github.com/${{ github.repository }}/blob/main/README.md)
            - [API Documentation](https://github.com/${{ github.repository }}/blob/main/docs/api.md)
            - [Contributing Guide](https://github.com/${{ github.repository }}/blob/main/CONTRIBUTING.md)
          draft: false
          prerelease: ${{ contains(github.ref_name || inputs.version, 'beta') || contains(github.ref_name || inputs.version, 'alpha') }}

  build-and-upload:
    name: 🏗️ Build & Upload Assets
    runs-on: ubuntu-latest
    needs: create-release
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build Docker images
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/client/Dockerfile
          platforms: ${{ matrix.platform }}
          push: false
          tags: probuilder-client:${{ github.ref_name || inputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 📦 Upload Docker images
        run: |
          # Save Docker images as tar files
          docker save probuilder-client:${{ github.ref_name || inputs.version }} | gzip > probuilder-client-${{ github.ref_name || inputs.version }}.tar.gz

          # Upload to release
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/gzip" \
            --data-binary @probuilder-client-${{ github.ref_name || inputs.version }}.tar.gz \
            "${{ needs.create-release.outputs.upload_url }}?name=probuilder-client-${{ github.ref_name || inputs.version }}.tar.gz"

  notify:
    name: 📢 Notify Release
    runs-on: ubuntu-latest
    needs: [create-release, build-and-upload]
    if: always()
    steps:
      - name: 📢 Notify Slack
        if: env.SLACK_WEBHOOK_URL
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{
              "text": "🚀 New Release: ${{ github.ref_name || inputs.version }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*🚀 ProBuilder Release ${{ github.ref_name || inputs.version }}*\n\n✅ Release created successfully!\n📦 Docker images built and uploaded\n🔗 <https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name || inputs.version }}|View Release>"
                  }
                }
              ]
            }' \
            ${{ secrets.SLACK_WEBHOOK_URL }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

